version: "3.7"

services:
  reverse-proxy:
    container_name: reverse-proxy
    image: traefik:v2.8
    restart: always
    ports:
      - ${NGINX_PORT-80}:80
      - ${NGINX_PORT_SSL-443}:443
      - 8080:8080
    command: --providers.docker
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ${PWD}/traefik:/root/.config
      - ${PWD}/traefik/shared:/shared
      - ${PWD}/traefik/letsencrypt:/letsencrypt
    networks:
      - tipi_main_network

  tipi-db:
    container_name: tipi-db
    image: postgres:latest
    restart: on-failure
    stop_grace_period: 1m
    volumes:
      - ./data/postgres:/var/lib/postgresql/data
    ports:
      - 5432:5432
    environment:
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_USER: tipi
      POSTGRES_DB: tipi
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d tipi -U tipi"]
      interval: 5s
      timeout: 10s
      retries: 120
    networks:
      - tipi_main_network

  api:
    build:
      context: .
      dockerfile: Dockerfile.dev
    command: /bin/sh -c "cd /api && npm run build && npm run dev"
    depends_on:
      tipi-db:
        condition: service_healthy
    container_name: api
    ports:
      - 3001:3001
    volumes:
      ## Docker sock
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ${PWD}:/runtipi
      - ${PWD}/packages/system-api/src:/api/src
      - ${PWD}/logs:/app/logs
      - ${STORAGE_PATH}:/app/storage
      # - /api/node_modules
    environment:
      INTERNAL_IP: ${INTERNAL_IP}
      TIPI_VERSION: ${TIPI_VERSION}
      JWT_SECRET: ${JWT_SECRET}
      NGINX_PORT: ${NGINX_PORT}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_USERNAME: tipi
      POSTGRES_DBNAME: tipi
      POSTGRES_HOST: tipi-db
      APPS_REPO_ID: ${APPS_REPO_ID}
      APPS_REPO_URL: ${APPS_REPO_URL}
      DOMAIN: ${DOMAIN}
    networks:
      - tipi_main_network
    labels:
      traefik.enable: true
      # Web
      traefik.http.routers.api.rule: PathPrefix(`/api`)
      traefik.http.routers.api.service: api
      traefik.http.routers.api.entrypoints: web
      traefik.http.routers.api.middlewares: api-stripprefix
      traefik.http.services.api.loadbalancer.server.port: 3001
      # Middlewares
      traefik.http.middlewares.api-stripprefix.stripprefix.prefixes: /api

  dashboard:
    build:
      context: .
      dockerfile: Dockerfile.dev
    command: /bin/sh -c "cd /dashboard && npm run dev"
    container_name: dashboard
    depends_on:
      api:
        condition: service_started
    ports:
      - 3000:3000
    networks:
      - tipi_main_network
    environment:
      INTERNAL_IP: ${INTERNAL_IP}
      DOMAIN: ${DOMAIN}
      NGINX_PORT: ${NGINX_PORT-80}
    volumes:
      - ${PWD}/packages/dashboard/src:/dashboard/src
      # - /dashboard/node_modules
      # - /dashboard/.next
    labels:
      traefik.enable: true
      traefik.http.routers.dashboard-redirect.rule: PathPrefix("/")
      traefik.http.routers.dashboard-redirect.entrypoints: web
      traefik.http.routers.dashboard-redirect.middlewares: redirect-middleware
      traefik.http.routers.dashboard-redirect.service: dashboard
      traefik.http.services.dashboard-redirect.loadbalancer.server.port: 3000

      # Web
      traefik.http.routers.dashboard.rule: PathPrefix("/dashboard")
      traefik.http.routers.dashboard.service: dashboard
      traefik.http.routers.dashboard.entrypoints: web
      traefik.http.services.dashboard.loadbalancer.server.port: 3000
      # Middlewares
      traefik.http.middlewares.redirect-middleware.redirectregex.regex: .*
      traefik.http.middlewares.redirect-middleware.redirectregex.replacement: /dashboard

networks:
  tipi_main_network:
    driver: bridge
    driver_opts:
      com.docker.network.bridge.enable_ip_masquerade: "true"
      com.docker.network.bridge.enable_icc: "true"
    ipam:
      driver: default
      config:
        - subnet: 10.21.21.0/24
